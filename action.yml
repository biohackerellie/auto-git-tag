
name: "Auto Git Tag"
author: 'Ellie Kerns <epkerns@gmail.com>'
description: "Automatically tag releases based on commit messages"
  
inputs:
  github_token:
    description: "GitHub token for authentication"
    required: true
  release_branch:
    description: "The branch to consider as the release branch (default: release)"
    required: false
    default: "release"
permissions:
  contents: write
runs:
  using: composite
  steps:
    - name: Set up Git
      shell: bash
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

    - name: Determine Current Branch
      id: current_branch
      shell: bash
      run: |
        BRANCH=$(echo "${GITHUB_REF#refs/heads/}")
        if [[ "$GITHUB_REF" == refs/pull/* ]]; then
          BRANCH="pull_request"
        fi
        echo "branch=$BRANCH" >> $GITHUB_ENV

    - name: Determine Version Bump
      id: version_bump
      shell: bash
      run: |
        BUMP_TYPE="patch"
        if [ "$BRANCH" != "pull_request" ]; then
          for COMMIT in $(git log origin/${{ env.branch }}..HEAD --pretty=format:"%s"); do
            if [[ "$COMMIT" == *"(major)"* ]]; then
              BUMP_TYPE="major"
              break
            elif [[ "$COMMIT" == *"(minor)"* ]]; then
              if [[ "$BUMP_TYPE" != "major" ]]; then
                BUMP_TYPE="minor"
              fi
            elif [[ "$COMMIT" == *"(patch)"* ]]; then
              if [[ "$BUMP_TYPE" != "major" && "$BUMP_TYPE" != "minor" ]]; then
                BUMP_TYPE="patch"
              fi
            fi
          done
        fi
        echo "bump_type=$BUMP_TYPE" >> $GITHUB_ENV
        echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT

    - name: Get Latest Release Tag
      id: get_latest_release_tag
      shell: bash
      run: |
        RELEASE_BRANCH=${{ inputs.release_branch }}
        TAGS=$(git tag --merged origin/$RELEASE_BRANCH --sort=-v:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$')
        RELEASE_TAG=$(echo "$TAGS" | awk 'NR==1')
        echo "latest_release_tag=$RELEASE_TAG" >> $GITHUB_ENV
        echo "latest_release_tag=$RELEASE_TAG" >> $GITHUB_OUTPUT

    - name: Get Latest Tag for Branch
      id: get_latest_branch_tag
      shell: bash
      run: |
        BRANCH=${{ env.branch }}
        RELEASE_TAG=${{ env.latest_release_tag }}

        if [ "$BRANCH" == "pull_request" ]; then
          echo "This is a pull request context. Skipping tagging." >&2
          exit 0
        fi

        if [ "$BRANCH" != "${{ inputs.release_branch }}" ]; then
          CURRENT_TAG="$RELEASE_TAG"
        else
          CURRENT_TAG=$(git tag --list 'v*' --sort=-v:refname | awk 'NR==1')
        fi

        echo "latest_tag=$CURRENT_TAG" >> $GITHUB_ENV
        echo "latest_tag=$CURRENT_TAG" >> $GITHUB_OUTPUT

    - name: Calculate Next Tag
      id: next_tag
      shell: bash
      run: |
        BRANCH=${{ env.branch }}
        BUMP_TYPE=${{ env.bump_type }}
        CURRENT_TAG=${{ env.latest_tag }}
        RELEASE_TAG=${{ env.latest_release_tag }}

        if [ "$BRANCH" == "pull_request" ]; then
          echo "This is a pull request context. Skipping tagging." >&2
          exit 0
        fi

        if [ -z "$CURRENT_TAG" ]; then
          if [ "$BRANCH" == "${{ inputs.release_branch }}" ]; then
            NEXT_TAG="v1.0.0"
          else
            NEXT_TAG="v1.0.0-$BRANCH.1"
          fi
        else
          if [ "$BRANCH" == "${{ inputs.release_branch }}" ]; then
            VERSION=$(echo "$RELEASE_TAG" | sed -E 's/^v([0-9]+\.[0-9]+\.[0-9]+).*/\1/')
            MAJOR=$(echo $VERSION | cut -d. -f1)
            MINOR=$(echo $VERSION | cut -d. -f2)
            PATCH=$(echo $VERSION | cut -d. -f3)

            if [ "$BUMP_TYPE" == "major" ]; then
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
            elif [ "$BUMP_TYPE" == "minor" ]; then
              MINOR=$((MINOR + 1))
              PATCH=0
            elif [ "$BUMP_TYPE" == "patch" ]; then
              PATCH=$((PATCH + 1))
            fi
            NEXT_TAG="v$MAJOR.$MINOR.$PATCH"
          else
            BASE_VERSION=$(echo "$RELEASE_TAG" | sed -E 's/^v([0-9]+\.[0-9]+\.[0-9]+).*/\1/')
            BRANCH_SUFFIX=$(git tag --list "v$BASE_VERSION-$BRANCH.*" --sort=-v:refname | awk 'NR==1' | sed -E "s/.*$BRANCH\.([0-9]+)$/\1/")
            NEXT_SUFFIX=$((BRANCH_SUFFIX + 1))
            NEXT_TAG="v$BASE_VERSION-$BRANCH.$NEXT_SUFFIX"
          fi
        fi

        echo "NEXT_TAG=$NEXT_TAG" >> $GITHUB_ENV
        echo "NEXT_TAG=$NEXT_TAG" >> $GITHUB_OUTPUT

    - name: Push action
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
      run: |
        if [ "$BRANCH" == "pull_request" ]; then
          echo "This is a pull request context. Skipping tagging." >&2
          exit 0
        fi
        MERGE_COMMIT=$(git rev-parse HEAD)
        git tag -a "$NEXT_TAG" "$MERGE_COMMIT" -m "Tagging"
        git push origin "$NEXT_TAG"
